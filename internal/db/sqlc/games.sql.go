// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: games.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (code, status)
VALUES($1, $2)
RETURNING id, code, status, created_at
`

type CreateGameParams struct {
	Code   string
	Status string
}

type CreateGameRow struct {
	ID        int64
	Code      string
	Status    string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (CreateGameRow, error) {
	row := q.db.QueryRow(ctx, createGame, arg.Code, arg.Status)
	var i CreateGameRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getGameByCode = `-- name: GetGameByCode :one
SELECT id, code , status, created_at, updated_at 
FROM games
WHERE code = $1
`

func (q *Queries) GetGameByCode(ctx context.Context, code string) (Game, error) {
	row := q.db.QueryRow(ctx, getGameByCode, code)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGameStatus = `-- name: UpdateGameStatus :exec
UPDATE games
SET status = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateGameStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) UpdateGameStatus(ctx context.Context, arg UpdateGameStatusParams) error {
	_, err := q.db.Exec(ctx, updateGameStatus, arg.ID, arg.Status)
	return err
}
