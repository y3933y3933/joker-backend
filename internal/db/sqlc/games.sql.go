// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: games.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (code, status)
VALUES($1, $2)
RETURNING id, code, status, created_at
`

type CreateGameParams struct {
	Code   string
	Status string
}

type CreateGameRow struct {
	ID        int64
	Code      string
	Status    string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (CreateGameRow, error) {
	row := q.db.QueryRow(ctx, createGame, arg.Code, arg.Status)
	var i CreateGameRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteByCode = `-- name: DeleteByCode :exec
DELETE FROM games WHERE code = $1
`

func (q *Queries) DeleteByCode(ctx context.Context, code string) error {
	_, err := q.db.Exec(ctx, deleteByCode, code)
	return err
}

const endGame = `-- name: EndGame :exec
UPDATE games
SET status = 'ended',
    updated_at = NOW()
WHERE code = $1
`

func (q *Queries) EndGame(ctx context.Context, code string) error {
	_, err := q.db.Exec(ctx, endGame, code)
	return err
}

const getActiveRoomsCount = `-- name: GetActiveRoomsCount :one
SELECT COUNT(*) AS active_rooms
FROM games
WHERE status != 'ended'
`

func (q *Queries) GetActiveRoomsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getActiveRoomsCount)
	var active_rooms int64
	err := row.Scan(&active_rooms)
	return active_rooms, err
}

const getGameByCode = `-- name: GetGameByCode :one
SELECT id, code , status, created_at, updated_at 
FROM games
WHERE code = $1
`

func (q *Queries) GetGameByCode(ctx context.Context, code string) (Game, error) {
	row := q.db.QueryRow(ctx, getGameByCode, code)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGameStatusByID = `-- name: GetGameStatusByID :one
SELECT status
FROM games
WHERE id = $1
`

func (q *Queries) GetGameStatusByID(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRow(ctx, getGameStatusByID, id)
	var status string
	err := row.Scan(&status)
	return status, err
}

const getGamesTodayCount = `-- name: GetGamesTodayCount :one
SELECT COUNT(*) AS games_today
FROM games
WHERE created_at >= CURRENT_DATE
`

func (q *Queries) GetGamesTodayCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getGamesTodayCount)
	var games_today int64
	err := row.Scan(&games_today)
	return games_today, err
}

const listGames = `-- name: ListGames :many
SELECT
  COUNT(*) OVER() AS total_count,
  g.id,
  g.code,
  g.status,
  COUNT(p.id) AS player_count,
  g.created_at
FROM games g
LEFT JOIN players p ON p.game_id = g.id
WHERE (UPPER(g.code) = UPPER($1) OR $1 = '')
    AND (g.status = $2 OR $2 = ''  )
GROUP BY g.id
ORDER BY g.created_at DESC
LIMIT $3 OFFSET $4
`

type ListGamesParams struct {
	Upper  interface{}
	Status string
	Limit  int32
	Offset int32
}

type ListGamesRow struct {
	TotalCount  int64
	ID          int64
	Code        string
	Status      string
	PlayerCount int64
	CreatedAt   pgtype.Timestamptz
}

func (q *Queries) ListGames(ctx context.Context, arg ListGamesParams) ([]ListGamesRow, error) {
	rows, err := q.db.Query(ctx, listGames,
		arg.Upper,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGamesRow
	for rows.Next() {
		var i ListGamesRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.Code,
			&i.Status,
			&i.PlayerCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGameStatus = `-- name: UpdateGameStatus :exec
UPDATE games
SET status = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateGameStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) UpdateGameStatus(ctx context.Context, arg UpdateGameStatusParams) error {
	_, err := q.db.Exec(ctx, updateGameStatus, arg.ID, arg.Status)
	return err
}
