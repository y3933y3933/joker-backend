// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feedback.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countRecentFeedbacksOneMonth = `-- name: CountRecentFeedbacksOneMonth :one
SELECT COUNT(*) AS feedback_count
FROM feedback
WHERE created_at >= (CURRENT_DATE - INTERVAL '30 days')
`

func (q *Queries) CountRecentFeedbacksOneMonth(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentFeedbacksOneMonth)
	var feedback_count int64
	err := row.Scan(&feedback_count)
	return feedback_count, err
}

const createFeedback = `-- name: CreateFeedback :exec
INSERT INTO feedback (type, content)
VALUES ($1, $2)
`

type CreateFeedbackParams struct {
	Type    string
	Content string
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) error {
	_, err := q.db.Exec(ctx, createFeedback, arg.Type, arg.Content)
	return err
}

const getFeedbackByID = `-- name: GetFeedbackByID :one
SELECT id, type, is_reviewed,content,created_at 
FROM feedback
WHERE id = $1
`

type GetFeedbackByIDRow struct {
	ID         int64
	Type       string
	IsReviewed bool
	Content    string
	CreatedAt  pgtype.Timestamptz
}

func (q *Queries) GetFeedbackByID(ctx context.Context, id int64) (GetFeedbackByIDRow, error) {
	row := q.db.QueryRow(ctx, getFeedbackByID, id)
	var i GetFeedbackByIDRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.IsReviewed,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listFeedback = `-- name: ListFeedback :many
SELECT COUNT(*) OVER(), id, type, is_reviewed, content , created_at 
FROM feedback 
WHERE (type = $1 OR $1 = '') AND is_reviewed = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListFeedbackParams struct {
	Type       string
	IsReviewed bool
	Limit      int32
	Offset     int32
}

type ListFeedbackRow struct {
	Count      int64
	ID         int64
	Type       string
	IsReviewed bool
	Content    string
	CreatedAt  pgtype.Timestamptz
}

func (q *Queries) ListFeedback(ctx context.Context, arg ListFeedbackParams) ([]ListFeedbackRow, error) {
	rows, err := q.db.Query(ctx, listFeedback,
		arg.Type,
		arg.IsReviewed,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedbackRow
	for rows.Next() {
		var i ListFeedbackRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.Type,
			&i.IsReviewed,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedbackReviewStatus = `-- name: UpdateFeedbackReviewStatus :exec
UPDATE feedback 
SET is_reviewed = $2
WHERE id = $1
`

type UpdateFeedbackReviewStatusParams struct {
	ID         int64
	IsReviewed bool
}

func (q *Queries) UpdateFeedbackReviewStatus(ctx context.Context, arg UpdateFeedbackReviewStatusParams) error {
	_, err := q.db.Exec(ctx, updateFeedbackReviewStatus, arg.ID, arg.IsReviewed)
	return err
}
