// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: players.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPlayersInGame = `-- name: CountPlayersInGame :one
SELECT COUNT(*)
FROM players
WHERE game_id = $1
`

func (q *Queries) CountPlayersInGame(ctx context.Context, gameID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countPlayersInGame, gameID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players(game_id, nickname, is_host)
VALUES($1, $2, $3)
RETURNING id, game_id,nickname, is_host, joined_at
`

type CreatePlayerParams struct {
	GameID   int64
	Nickname string
	IsHost   pgtype.Bool
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer, arg.GameID, arg.Nickname, arg.IsHost)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Nickname,
		&i.IsHost,
		&i.JoinedAt,
	)
	return i, err
}

const findPlayersByGameID = `-- name: FindPlayersByGameID :many
SELECT id, nickname, is_host, game_id
FROM players
WHERE game_id = $1
`

type FindPlayersByGameIDRow struct {
	ID       int64
	Nickname string
	IsHost   pgtype.Bool
	GameID   int64
}

func (q *Queries) FindPlayersByGameID(ctx context.Context, gameID int64) ([]FindPlayersByGameIDRow, error) {
	rows, err := q.db.Query(ctx, findPlayersByGameID, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindPlayersByGameIDRow
	for rows.Next() {
		var i FindPlayersByGameIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.IsHost,
			&i.GameID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
