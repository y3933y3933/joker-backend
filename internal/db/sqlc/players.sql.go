// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: players.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPlayersInGame = `-- name: CountPlayersInGame :one
SELECT COUNT(*)
FROM players
WHERE game_id = $1
`

func (q *Queries) CountPlayersInGame(ctx context.Context, gameID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countPlayersInGame, gameID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players(game_id, nickname, is_host)
VALUES($1, $2, $3)
RETURNING id, game_id,nickname, is_host, joined_at
`

type CreatePlayerParams struct {
	GameID   int64
	Nickname string
	IsHost   pgtype.Bool
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer, arg.GameID, arg.Nickname, arg.IsHost)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Nickname,
		&i.IsHost,
		&i.JoinedAt,
	)
	return i, err
}

const deletePlayerByID = `-- name: DeletePlayerByID :exec
DELETE FROM players WHERE id = $1
`

func (q *Queries) DeletePlayerByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePlayerByID, id)
	return err
}

const findPlayerByID = `-- name: FindPlayerByID :one
SELECT id, nickname, is_host, game_id
FROM players
WHERE id = $1
`

type FindPlayerByIDRow struct {
	ID       int64
	Nickname string
	IsHost   pgtype.Bool
	GameID   int64
}

func (q *Queries) FindPlayerByID(ctx context.Context, id int64) (FindPlayerByIDRow, error) {
	row := q.db.QueryRow(ctx, findPlayerByID, id)
	var i FindPlayerByIDRow
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.IsHost,
		&i.GameID,
	)
	return i, err
}

const findPlayerByNickname = `-- name: FindPlayerByNickname :one
SELECT id, nickname, is_host, game_id
FROM players
WHERE game_id = $1 AND nickname = $2
`

type FindPlayerByNicknameParams struct {
	GameID   int64
	Nickname string
}

type FindPlayerByNicknameRow struct {
	ID       int64
	Nickname string
	IsHost   pgtype.Bool
	GameID   int64
}

func (q *Queries) FindPlayerByNickname(ctx context.Context, arg FindPlayerByNicknameParams) (FindPlayerByNicknameRow, error) {
	row := q.db.QueryRow(ctx, findPlayerByNickname, arg.GameID, arg.Nickname)
	var i FindPlayerByNicknameRow
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.IsHost,
		&i.GameID,
	)
	return i, err
}

const findPlayersByGameID = `-- name: FindPlayersByGameID :many
SELECT id, nickname, is_host, game_id
FROM players
WHERE game_id = $1
ORDER BY id
`

type FindPlayersByGameIDRow struct {
	ID       int64
	Nickname string
	IsHost   pgtype.Bool
	GameID   int64
}

func (q *Queries) FindPlayersByGameID(ctx context.Context, gameID int64) ([]FindPlayersByGameIDRow, error) {
	rows, err := q.db.Query(ctx, findPlayersByGameID, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindPlayersByGameIDRow
	for rows.Next() {
		var i FindPlayersByGameIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.IsHost,
			&i.GameID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGamePlayerStats = `-- name: GetGamePlayerStats :many
SELECT
  p.id,
  p.nickname,
  COUNT(CASE WHEN r.is_joker = TRUE THEN 1 END) AS joker_cards_drawn
FROM players p
LEFT JOIN rounds r ON r.answer_player_id = p.id AND r.game_id = $1
WHERE p.game_id = $1
GROUP BY p.id, p.nickname
ORDER BY p.id
`

type GetGamePlayerStatsRow struct {
	ID              int64
	Nickname        string
	JokerCardsDrawn int64
}

func (q *Queries) GetGamePlayerStats(ctx context.Context, gameID int64) ([]GetGamePlayerStatsRow, error) {
	rows, err := q.db.Query(ctx, getGamePlayerStats, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGamePlayerStatsRow
	for rows.Next() {
		var i GetGamePlayerStatsRow
		if err := rows.Scan(&i.ID, &i.Nickname, &i.JokerCardsDrawn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHost = `-- name: UpdateHost :exec
UPDATE players
SET is_host = $2
WHERE id = $1
`

type UpdateHostParams struct {
	ID     int64
	IsHost pgtype.Bool
}

func (q *Queries) UpdateHost(ctx context.Context, arg UpdateHostParams) error {
	_, err := q.db.Exec(ctx, updateHost, arg.ID, arg.IsHost)
	return err
}
