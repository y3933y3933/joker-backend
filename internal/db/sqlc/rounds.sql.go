// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rounds.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRound = `-- name: CreateRound :one
INSERT INTO rounds (
  game_id, question_id, answer, question_player_id,
  answer_player_id, is_joker, status, deck
)
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, game_id, question_id, answer, question_player_id,
          answer_player_id, is_joker, status, created_at, deck
`

type CreateRoundParams struct {
	GameID           int64
	QuestionID       pgtype.Int8
	Answer           pgtype.Text
	QuestionPlayerID int64
	AnswerPlayerID   int64
	IsJoker          pgtype.Bool
	Status           string
	Deck             []string
}

func (q *Queries) CreateRound(ctx context.Context, arg CreateRoundParams) (Round, error) {
	row := q.db.QueryRow(ctx, createRound,
		arg.GameID,
		arg.QuestionID,
		arg.Answer,
		arg.QuestionPlayerID,
		arg.AnswerPlayerID,
		arg.IsJoker,
		arg.Status,
		arg.Deck,
	)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.QuestionID,
		&i.Answer,
		&i.QuestionPlayerID,
		&i.AnswerPlayerID,
		&i.IsJoker,
		&i.Status,
		&i.CreatedAt,
		&i.Deck,
	)
	return i, err
}

const findLastRoundByGameID = `-- name: FindLastRoundByGameID :one
SELECT id, game_id, question_id, answer, question_player_id, answer_player_id, is_joker,status,deck
FROM rounds
WHERE game_id = $1
ORDER BY created_at DESC
LIMIT 1
`

type FindLastRoundByGameIDRow struct {
	ID               int64
	GameID           int64
	QuestionID       pgtype.Int8
	Answer           pgtype.Text
	QuestionPlayerID int64
	AnswerPlayerID   int64
	IsJoker          pgtype.Bool
	Status           string
	Deck             []string
}

func (q *Queries) FindLastRoundByGameID(ctx context.Context, gameID int64) (FindLastRoundByGameIDRow, error) {
	row := q.db.QueryRow(ctx, findLastRoundByGameID, gameID)
	var i FindLastRoundByGameIDRow
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.QuestionID,
		&i.Answer,
		&i.QuestionPlayerID,
		&i.AnswerPlayerID,
		&i.IsJoker,
		&i.Status,
		&i.Deck,
	)
	return i, err
}

const getRoundByID = `-- name: GetRoundByID :one
SELECT id, game_id, question_id, answer, question_player_id, answer_player_id, is_joker, status, deck  
FROM rounds WHERE id = $1
`

type GetRoundByIDRow struct {
	ID               int64
	GameID           int64
	QuestionID       pgtype.Int8
	Answer           pgtype.Text
	QuestionPlayerID int64
	AnswerPlayerID   int64
	IsJoker          pgtype.Bool
	Status           string
	Deck             []string
}

func (q *Queries) GetRoundByID(ctx context.Context, id int64) (GetRoundByIDRow, error) {
	row := q.db.QueryRow(ctx, getRoundByID, id)
	var i GetRoundByIDRow
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.QuestionID,
		&i.Answer,
		&i.QuestionPlayerID,
		&i.AnswerPlayerID,
		&i.IsJoker,
		&i.Status,
		&i.Deck,
	)
	return i, err
}

const getRoundWithQuestion = `-- name: GetRoundWithQuestion :one
SELECT r.id, r.game_id, r.question_id, r.answer, r.question_player_id, r.answer_player_id, r.status, r.deck,r.is_joker,q.level, q.content AS question_content
FROM rounds r
JOIN questions q ON q.id = r.question_id
WHERE r.id = $1
`

type GetRoundWithQuestionRow struct {
	ID               int64
	GameID           int64
	QuestionID       pgtype.Int8
	Answer           pgtype.Text
	QuestionPlayerID int64
	AnswerPlayerID   int64
	Status           string
	Deck             []string
	IsJoker          pgtype.Bool
	Level            string
	QuestionContent  string
}

func (q *Queries) GetRoundWithQuestion(ctx context.Context, id int64) (GetRoundWithQuestionRow, error) {
	row := q.db.QueryRow(ctx, getRoundWithQuestion, id)
	var i GetRoundWithQuestionRow
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.QuestionID,
		&i.Answer,
		&i.QuestionPlayerID,
		&i.AnswerPlayerID,
		&i.Status,
		&i.Deck,
		&i.IsJoker,
		&i.Level,
		&i.QuestionContent,
	)
	return i, err
}

const setRoundQuestion = `-- name: SetRoundQuestion :exec
UPDATE rounds
SET question_id = $1,
    status = 'waiting_for_answer'
WHERE id = $2
`

type SetRoundQuestionParams struct {
	QuestionID pgtype.Int8
	ID         int64
}

func (q *Queries) SetRoundQuestion(ctx context.Context, arg SetRoundQuestionParams) error {
	_, err := q.db.Exec(ctx, setRoundQuestion, arg.QuestionID, arg.ID)
	return err
}

const updateAnswer = `-- name: UpdateAnswer :exec
UPDATE rounds
SET answer = $2,
    status = $3
WHERE id = $1
`

type UpdateAnswerParams struct {
	ID     int64
	Answer pgtype.Text
	Status string
}

func (q *Queries) UpdateAnswer(ctx context.Context, arg UpdateAnswerParams) error {
	_, err := q.db.Exec(ctx, updateAnswer, arg.ID, arg.Answer, arg.Status)
	return err
}

const updateDrawResult = `-- name: UpdateDrawResult :exec
UPDATE rounds
SET is_joker = $2,
    status = $3
WHERE id = $1
`

type UpdateDrawResultParams struct {
	ID      int64
	IsJoker pgtype.Bool
	Status  string
}

func (q *Queries) UpdateDrawResult(ctx context.Context, arg UpdateDrawResultParams) error {
	_, err := q.db.Exec(ctx, updateDrawResult, arg.ID, arg.IsJoker, arg.Status)
	return err
}
